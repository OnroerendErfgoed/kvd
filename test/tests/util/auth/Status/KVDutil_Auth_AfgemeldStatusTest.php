<?php

/**
 * Test class for KVDutil_Auth_AfgemeldStatus.
 * Generated by PHPUnit on 2011-09-05 at 14:22:09.
 */
class KVDutil_Auth_AfgemeldStatusTest extends PHPUnit_Framework_TestCase {

    /**
     * @var KVDutil_Auth_AfgemeldStatus
     */
    protected $object;

    /**
     * @var MockAuthenticatie
     */
    protected $authenticatie;

    /**
     * @var MockProvider
     */
    protected $provider;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $connectie['goessebr'] = array(
            'paswoord' => 'encryrpted_pas',
            'familienaam' => 'Goessens',
            'voornaam' => 'Bram',
            'mail' => 'bram.goessens@rwo.vlaanderen.be',
            'telefoon' => '02/5531868',
            'rollen'=> array(
                'oeps'=>array(
                    'oeps.beheerder'=>array(
                        'naam'=>'Beheerder oeps',
                        'beschrijving'=>'beschrijving beheerder oeps'
                    )
                ),
                'oar'=> array(
                    'oar.beheerder'=>array(
                        'naam'=>'Beheerder oar',
                        'beschrijving'=>'beschrijving beheerder oar'
                    )
                ),
                'cai'=> array(
                    'cai.beheerder'=>array(
                        'naam'=>'Beheerder cai',
                        'beschrijving'=>'beschrijving beheerder cai'
                    ),
                    'cai.invoerder'=>array(
                        'naam'=>'Invoerder cai',
                        'beschrijving'=>'beschrijving Invoerder cai'
                    )
                )
            )
        );
        $this->provider = new KVDutil_Auth_ArrayProvider( $connectie );

        // Get a Mock authenticatie object to work with.
        $classToMock = 'KVDutil_Auth_Authenticatie';
        $methodsToMock = array('setStatus', 'getAangemeldStatus', 'getLoggedInState');
        $mockConstructorParams = array();
        $mockClassName = '';
        $callMockConstructor = false;

        $this->authenticatie = $this->getMock($classToMock,
                                     $methodsToMock,
                                     $mockConstructorParams,
                                     $mockClassName,
                                     $callMockConstructor);
        
        $this->object = new KVDutil_Auth_AfgemeldStatus( $this->authenticatie, $this->provider );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->provider = null;
        $this->authenticatie = null;
        $this->object = null;
    }

    public function testAanmelden() {
        $this->authenticatie->expects($this->once())
                 ->method('setStatus');
        $this->authenticatie->expects($this->exactly(2))
                 ->method('getAangemeldStatus')
                 ->will( $this->returnValue(new KVDutil_Auth_AangemeldStatus($this->authenticatie)));
        $this->assertTrue(
                $this->object->aanmelden( 'goessebr', 'encryrpted_pas' ));
        $this->assertFalse(
                $this->object->aanmelden( 'doesntexist', 'encryrpted_pas' ));
        $this->assertFalse(
                $this->object->aanmelden( 'goessebr', 'foutpaswoord' ));
    }

    public function testAfmelden() {
        $this->assertTrue($this->object->afmelden());
    }

    public function testGetGebruiker() {
        $this->assertInstanceOf('KVDutil_Auth_Gebruiker', $this->object->getGebruiker());
        $this->assertTrue($this->object->getGebruiker()->isNull());
    }

    public function testIsAangemeld() {
        $this->assertFalse($this->object->isAangemeld());
    }

}

?>
